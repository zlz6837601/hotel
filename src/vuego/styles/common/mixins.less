.transition(@d) {
  transition-duration: @d;
}
.delay(@d) {
  transition-delay: @d;
}
.transform(@t) {
  transform: @t;
}
.transform-origin(@to) {
  transform-origin: @to;
}
.translate3d(@x:0, @y:0, @z:0) {
  transform: translate3d(@x,@y,@z);
}
.animation(@a) {
  animation: @a;
}
.scrollable(){
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}
.flexbox() {
  display: flex;
}
.flexbox-inline() {
  display: inline-flex;
}
.flex-wrap(@fw) when (@fw = nowrap) {
  flex-wrap: nowrap;
}
.flex-wrap(@fw) when (@fw = wrap) {
  flex-wrap: wrap;
}
.flex-wrap(@fw) when not (@fw = wrap) and not (@fw = nowrap) {
  flex-wrap: @fw;
}
.flex-shrink(@fs) {
  flex-shrink: @fs;
}
.justify-content(@jc) when (@jc = flex-start) {
  justify-content: flex-start;
}
.justify-content(@jc) when (@jc = flex-end) {
  justify-content: flex-end;
}
.justify-content(@jc) when (@jc = space-between) {
  justify-content: space-between;
}
.justify-content(@jc) when not (@jc = flex-start) and not (@jc = flex-end) and not (@jc = space-between) {
  justify-content: @jc;
}
.align-items(@ai) when (@ai = flex-start) {
  align-items: flex-start;
}
.align-items(@ai) when (@ai = flex-end) {
  align-items: flex-end;
}
.align-items(@ai) when not (@ai = flex-start) and not (@ai = flex-end) {
  align-items: @ai;
}
.align-content(@ai) {
  align-content: @ai;
}
.align-self(@as) {
  align-self: @as;
}
.clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// border
.border(@position, @color) when (@position = top) {
  &:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: auto;
    right: auto;
    height: 1px;
    width: 100%;
    background-color: @color;
    display: block;
    z-index: 15;
    .transform-origin(50% 0%);
    html.pixel-ratio-2 & {
      .transform(scaleY(0.5));
    }
    html.pixel-ratio-3 & {
      .transform(scaleY(0.33));
    }
  }
}
.border(@position, @color) when (@position = left) {
  &:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: auto;
    right: auto;
    width: 1px;
    height: 100%;
    background-color: @color;
    display: block;
    z-index: 15;
    .transform-origin(0% 50%);
    html.pixel-ratio-2 & {
      .transform(scaleX(0.5));
    }
    html.pixel-ratio-3 & {
      .transform(scaleX(0.33));
    }
  }
}
.border(@position, @color) when (@position = bottom) {
  &:after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    right: auto;
    top: auto;
    height: 1px;
    width: 100%;
    background-color: @color;
    display: block;
    z-index: 15;
    .transform-origin(50% 100%);
    html.pixel-ratio-2 & {
      .transform(scaleY(0.5));
    }
    html.pixel-ratio-3 & {
      .transform(scaleY(0.33));
    }
  }
}
.border(@position, @color) when (@position = right) {
  &:after {
    content: '';
    position: absolute;
    right: 0;
    top: 0;
    left: auto;
    bottom: auto;
    width: 1px;
    height: 100%;
    background-color: @color;
    display: block;
    z-index: 15;
    .transform-origin(100% 50%);
    html.pixel-ratio-2 & {
      .transform(scaleX(0.5));
    }
    html.pixel-ratio-3 & {
      .transform(scaleX(0.33));
    }
  }
}
// For right and bottom
.border-remove(@position) when not (@position = left) and not (@position = top) {
  &:after {
    display: none;
  }
}
// For left and top
.border-remove(@position) when not (@position = right) and not (@position = bottom) {
  &:before {
    display: none;
  }
}
// For right and bottom
.border-color(@position, @color) when not (@position = left) and not (@position = top) {
  &:after {
    background-color: @color;
  }
}
// For left and top
.border-color(@position, @color) when not (@position = right) and not (@position = bottom) {
  &:before {
    background-color: @color;
  }
}

// Encoded SVG Background
.encoded-svg-background(@svg) {
  @url: `encodeURIComponent(@{svg})`;
  background-image: url("data:image/svg+xml;charset=utf-8,@{url}");
}

// Backdrop Blur
.backdrop-blur(@blur) {
  -webkit-backdrop-filter: blur(@blur);
  backdrop-filter: blur(@blur);
}

// Preserve3D
.preserve3d() {
  -webkit-transform-style: preserve-3d;
  -moz-transform-style: preserve-3d;
  -ms-transform-style: preserve-3d;
  transform-style: preserve-3d;
}

// No Scrollbar
.no-scrollbar() {
  &::-webkit-scrollbar {
    display: none !important;
    width: 0 !important;
    height: 0 !important;
    -webkit-appearance: none;
    opacity: 0 !important;
  }
}
